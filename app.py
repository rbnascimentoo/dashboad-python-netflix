import streamlit as st
import pandas as pd
import plotly.express as px

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard de An√°lise da Netflix",
    page_icon="üé¨",
    layout="wide"
)

# --- Carregamento dos Dados ---
# O decorator @st.cache_data garante que os dados n√£o sejam recarregados a cada intera√ß√£o.
@st.cache_data
def load_data():
    try:
        # Alterado para carregar o novo dataset
        df = pd.read_csv('netflix_dataset.csv')
        # Tratamento b√°sico de dados: preencher pa√≠ses vazios
        df['Country'] = df['Country'].fillna('Desconhecido')
        return df
    except FileNotFoundError:
        st.error("Arquivo 'netflix_dataset.csv' n√£o encontrado. Certifique-se de que ele est√° na mesma pasta que o app.py")
        return None

df = load_data()

if df is not None:
    # --- T√≠tulo do Dashboard ---
    st.title("üé¨ Dashboard de An√°lise de Conte√∫do da Netflix")
    st.markdown("Use os filtros na barra lateral para explorar os dados.")

    # --- Barra Lateral (Sidebar) com Filtros ---
    st.sidebar.header("Filtros")
    
    # Filtro por Tipo de Conte√∫do (Movie/TV Show)
    tipos_disponiveis = df['Type'].unique()
    tipo_selecionado = st.sidebar.selectbox(
        "Selecione o Tipo de Conte√∫do:",
        options=tipos_disponiveis
    )

    # Filtro por Pa√≠s
    # Para o dataset real, pode ser necess√°rio um tratamento mais avan√ßado para m√∫ltiplos pa√≠ses
    paises_disponiveis = sorted(df['Country'].unique())
    pais_selecionado = st.sidebar.multiselect(
        "Selecione o Pa√≠s:",
        options=paises_disponiveis,
        default=['Brazil'] # Padr√£o com alguns pa√≠ses
    )

    # --- L√≥gica de Filtragem ---
    # Come√ßa filtrando por tipo, que sempre tem um valor selecionado
    df_filtrado = df[df['Type'] == tipo_selecionado]
    # Se um ou mais pa√≠ses forem selecionados, aplica o filtro de pa√≠s.
    # Se a lista estiver vazia, o filtro n√£o √© aplicado e todos os pa√≠ses s√£o mostrados.
    if pais_selecionado:
        df_filtrado = df_filtrado[df_filtrado['Country'].isin(pais_selecionado)]

    # Gr√°ficos em colunas
    col1, col2, col3 = st.columns(3)

    with col1:
        # Gr√°fico Treemap: Distribui√ß√£o de Filmes vs. S√©ries
        st.subheader("Distribui√ß√£o por Tipo")
        type_counts = df['Type'].value_counts().reset_index()
        type_counts.columns = ['Tipo', 'Contagem']
        fig_treemap_type = px.treemap(
            type_counts,
            path=[px.Constant("Todos"), 'Tipo'],
            values='Contagem',
            title='Distribui√ß√£o por Tipo de Conte√∫do',
            color='Tipo'
        )
        fig_treemap_type.update_layout(margin = dict(t=50, l=25, r=25, b=25))
        st.plotly_chart(fig_treemap_type, use_container_width=True)

    with col2:
        # Gr√°fico de Barras: Top 5 Pa√≠ses Produtores
        st.subheader("Top Pa√≠ses Produtores")
        top_countries = df['Country'].value_counts().nlargest(5).reset_index()
        top_countries.columns = ['Country', 'count']
        fig_bar = px.bar(top_countries, x='Country', y='count', title='Top 5 Pa√≠ses com Mais Conte√∫do')
        st.plotly_chart(fig_bar, use_container_width=True)

    with col3:
        # Gr√°fico de Pizza: Top 15 G√™neros
        st.subheader("Distribui√ß√£o por G√™neros")
        # Processamento para contar os g√™neros a partir da coluna 'listed_in'
        df_genres = df.dropna(subset=['Type'])
        genres = df_genres['Type'].str.split(', ').explode()
        top_genres = genres.value_counts().nlargest(15).reset_index()
        top_genres.columns = ['G√™nero', 'Contagem']
        fig_pie_genres = px.pie(
            top_genres,
            names='G√™nero',
            values='Contagem',
            title='Top 15 G√™neros na Netflix'
        )
        st.plotly_chart(fig_pie_genres, use_container_width=True)

    # --- Conte√∫do Principal ---
    st.header(f"Exibindo: {tipo_selecionado}s")

    # Exibindo os dados filtrados em uma tabela
    st.subheader("Dados Filtrados")
    st.dataframe(df_filtrado)
